@page "/manage"
@using BlazorAppForClient.Exceptions;
@using BlazorAppForClient.Interfaces;
@using BlazorAppForClient.ViewModels;
@inject IUsersService userService
@inject NavigationManager navmanager
@attribute [Authorize]
<h3>Profile</h3>


<MudCard>
    <MudCardContent>
        <h3>Edit Profile</h3>

        <MudTextField @bind-Value="user.clientName" Label="Username" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="user.firstName" Label="First Name" />
        <MudTextField @bind-Value="user.lastName" Label="Last Name" />
        <MudTextField @bind-Value="user.email" Label="Email" />
        <MudTextField @bind-Value="user.phoneNumber" Label="Phone number" />


        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Save Changes</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Delete">Delete account</MudButton>
    </MudCardContent>
</MudCard>










@code {
    UserViewModel user = new();
    
    protected  async Task Delete()
    {
        try{
            await userService.DeleteAsync();
            navmanager.NavigateTo($"/logout");

    }
    catch (NotAuthrizeExeption ex)
    {
        navmanager.NavigateTo($"expiredTokenRedirect");
    }
}





    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            user = await userService.GetByNameAsync();
        }
        catch (NotAuthrizeExeption ex)
        {
            navmanager.NavigateTo($"expiredTokenRedirect");
        }
    }

    protected  async Task Submit()
    {
        try{
            await userService.UpdateAsync(user);
    }
    catch (NotAuthrizeExeption ex)
    {
        navmanager.NavigateTo($"expiredTokenRedirect");
    }
}






}
